 *---------------------------------------------------------------------
 *    micro T-Kernel
 *
 *    Copyright (C) 2006-2014 by Ken Sakamura. All rights reserved.
 *    micro T-Kernel is distributed under the micro T-License.
 *---------------------------------------------------------------------
 *
 *    Version:   2.00.00
 *    Released by T-Engine Forum (http://www.t-engine.org) at 2014/09/01.
 *
 *---------------------------------------------------------------------
 *
 *    μT-Kernel ソースコード説明書   Rev.2.00.00
 *
 *---------------------------------------------------------------------

本書では "μT-Kernel ソースコード バージョン 2.00.00"の説明を行います。


目次

  0. 概要

  1. ディレクトリ構成
    1.1. ディレクトリ構成概要
    1.2. ソースディレクトリと構築ディレクトリについて
    1.3. ハードウェア依存部について
    1.4. ディレクトリ構造の概要
    1.5. funcディレクトリについて

  2. kernel ディレクトリ
    2.1. ディレクトリ構造
    2.2. kernel ディレクトリのカーネル基本部
    2.3. kernel ディレクトリのハードウェア依存部
    2.4. kernel ディレクトリのアプリケーション依存部

  3. lib ディレクトリ
    3.1. ディレクトリ構造
    3.2. 各ディレクトリ説明

  4. include ディレクトリ
    4.1. ディレクトリ構造
    4.2. 各ディレクトリの説明

  5. config ディレクトリ
    5.1. ディレクトリ構造

  6. μT-Kernel の構築
    6.1. μT-Kernel の構築手順
    6.2. μT-Kernel の書き込み

  7. μT-Kernel が使用する資源
    7.1. カーネルオブジェクト

  8. μT-Kernel の起動
    8.1. μT-Kernelの初期化処理
    8.2. 初期タスクによる起動処理


0. 概要
μT-Kernel ソースコード（以下、本ソースコード）は、T-Engine フォーラムから配布されているソースコードです。本ソースコードは "μT-Kernel仕様書 バージョン 2.00.02" に準拠します。

本ソースコードは、以下のターゲットボードに対応しています。ターゲットボード略称 および CPU 略称は、本ソースコードにおいて使用している名称です。

  ターゲットボード                   ターゲットボード略称  CPU 略称
--------------------------------------------------------------------------
  SK-FM3-48PMC-USBSTICK (Cortex-M3)  app_mb9af312k         mb9af312k

ターゲットボード略称 は、以下に示すT-Engine種別の略称 とCPU略称 を組み合わせて表現します。

T-Engine種別        T-Engine種別略称
------------------------------------------------------
標準T-Engine        std_
μT-Engine          mic_
T-Engine Appliance  app_

μT-Kernel 2.0のリファレンスソースコードには、以下のμT-Kernel 1.0で対応しているターゲットボードのハードウェア依存部(後述)も含まれています。これらは参考用であり、μT-Kernel 2.0の動作確認対象外となります。

  ターゲットボード                   ターゲットボード略称  CPU 略称
--------------------------------------------------------------------------
  H8S/2212ボード                     app_h8s2212           h8s2212
  ARM7実行ボード (AT91)              app_at91              at91

これらのハードウェア依存部については、適宜調整のうえ動作確認をしてから利用してください。


1. ディレクトリ構成

1.1. ディレクトリ構成概要
本ソースコードは、複数のディレクトリにより構成されています。
最上位ディレクトリは、以下の５つのディレクトリで構成されています。

<ディレクトリ構成>

    kernel     μT-Kernel 本体

    lib        ライブラリ
               （システムコールのインタフェース・ライブラリを含みます）

    include    各種定義ファイル（ヘッダファイル）

    config     各種設定ファイル

    etc        make ルール、スクリプトなど
               このディレクトリ下にはソースコードは含まれません。


1.2. ソースディレクトリと構築ディレクトリについて
下位のディレクトリは、ソースディレクトリと構築ディレクトリに大別されます。
原則として、ソースディレクトリの名称は『src』、構築ディレクトリの名称は『build』となっています。

ソースディレクトリは、ソースファイルが格納されています。
構築ディレクトリは、makeを実行し、オブジェクトファイルを作成するディレクトリです。構築ディレクトリには、makefile（makeルール定義ファイル）や、構築されたオブジェクトファイルが格納されます。


1.3. ハードウェア依存部について

本ソースコードでは、ハードウェア依存部の範囲を明確にするため、ディレクトリの単位でソースコードを分離しています。
また、実際にアプリケーションを開発し、製品等に組み込む場合、変更が必要なソースファイルがあります。これはアプリケーション依存部として、ハードウェア依存部同様にディレクトリの単位で分離し、範囲を明確にしています。

以上より、μT-Kernelのソースコードは、以下の三つに分けられます。

(1) カーネル基本部
ハードウェアやアプリケーションなどに依存しない、μT-Kernelとして基本的な機能を提供する部分です。
μT-Kernelの機能を改変するのではない限り、カーネル基本部を変更する必要はありません。

(2) ハードウェア依存部
μT-Kernelが動作するハードウェアに依存して変更が必要な部分です。
ハードウェア依存部は、通常はハードウェア毎に用意する必要があります。また、新しいハードウェアへの移植は、ハードウェア依存部のみの変更で可能です。

(3) アプリケーション依存部
μT-Kernel上で動作するアプリケーションに応じて変更が必要な部分です。
アプリケーション依存部は、通常は製品毎に用意する必要があります。
公開しているμT-Kernelのアプリケーション依存部は、必要最小限の機能のみが実装されています。


1.4. ディレクトリ構造の概要
以下にμT-Kernelソース全体のディレクトリ構造図を示します。
図を見やすくするため、ソースディレクトリ（src）と構築ディレクトリ（build）の階層は省略してあります（完全な構造図は後述）。

図中において、[ ]で囲まれた名称のディレクトリおよびその下位のディレクトリが、ハードウェア依存部です。また、< >で囲まれた名称のディレクトリおよびその下位のディレクトリが、アプリケーション依存部です。その他はカーネル基本部です。

また図中において、[TARGET] と記されたディレクトリは対象となるシステムのターゲットボード略称に、 [CPU] と記されたディレクトリは対象となるCPUのCPU略称に置き換えてください。


kernel                             μT-Kernel 本体
|-- sysinit                             システム初期化
|-- tkernel                             μT-Kernel
|-- sysmain                             システムメイン
|-- sysdepend                           ハードウェア依存部
|   |-- cpu                                CPU依存部
|   |   `-- [CPU]
|   `-- device                             デバイス依存部
|       `-- [TARGET]
|-- tstdlib                             カーネルリンク用標準ライブラリ
|
`-- <usermain>                          ユーザメイン

lib                                ライブラリ
|-- libsvc                              μT-Kernel システムコールI/Fライブラリ
|   `-- sysdepend                         ハードウェア依存部
|       |-- include                       共通定義ファイル
|       `-- [CPU]
|-- libtk                               μT-Kernel 関数コールライブラリ
|   `-- sysdepend                         ハードウェア依存部
|       `-- [TARGET]
|-- libtm                               T-Monitor相当機能ライブラリ
|   `-- sysdepend                         ハードウェア依存部
|       `-- [TARGET]
`-- libstr                              文字列操作ライブラリ

include                            定義ファイル
|-- tk                                  μT-Kernel関連の定義ファイル
|   `-- sysdepend                         ハードウェア依存部
|       `-- [TARGET]
|-- sys                                 システム内部情報の定義ファイル
|   |-- sysdepend                         ハードウェア依存部
|   |   `-- [TARGET]
|   `-- svc                                 システムコール定義
`-- tm                                  T-Monitor相当機能関連の定義ファイル

config                             設定情報
`-- sysdepend                         ハードウェア依存部
     `-- [TARGET]


1.5. func ディレクトリについて
srcディレクトリの下にfuncという名前のディレクトリがある場合、このfuncディレクトリにはカーネルのソースコードを関数単位に分割したファイルが格納されます。この関数単位のファイルは、カーネル構築時に自動生成されます。そのためfuncディレクトリにあるファイルを編集しても、次回の構築時に上書きされます。srcディレクトリのファイルを編集してください。


2. kernel ディレクトリ
kernelディレクトリは、μT-Kernel本体のソースコードを格納しています。

2.1. ディレクトリ構造
kernelディレクトリは以下のディレクトリ構造となっています。

kernel
|-- sysinit                 システム初期化(カーネル基本部)
|   |-- build                   構築用ディレクトリ
|   |   `-- [TARGET]
|   `-- src                     ソースディレクトリ
|
|-- tkernel                 μT-Kernel(カーネル基本部)
|   |-- build                   構築用ディレクトリ
|   |   `-- [TARGET]
|   `-- src                     ソースディレクトリ
|
|-- sysmain                 システムメイン(カーネル基本部)
|   |-- build                   構築用ディレクトリ
|   |   `-- [TARGET]            ←makeを実行するディレクトリ
|   `-- src                     ソースディレクトリ
|
|-- sysdepend               ハードウェア依存部
|   |-- cpu                     CPU依存部
|   |   `-- [CPU]
|   `-- device                  デバイス依存部
|       `-- [TARGET]
|
|-- tstdlib                 カーネルリンク用標準ライブラリ
|
`-- <usermain>              ユーザメイン(アプリケーション依存部)


上記のディレクトリ構成中の、[TARGET] と記されたディレクトリは対象となるシステムのターゲットボード略称に、 [CPU] と記されたディレクトリは対象となるCPUのCPU略称に置き換えてください。


2.2. kernel ディレクトリのカーネル基本部
kernel ディレクトリの中のカーネル基本部は、sysinit、tkernel、sysmain、tstdlib の４つのディレクトリから構成されます。カーネル基本部のソースコードは、各ディレクトリ中のsrcディレクトリに格納されています。

(1) sysinit ディレクトリ
μT-Kernel の初期化/終了処理ルーチンです。

(2) tkernel ディレクトリ
μT-Kernel のソースコードです。

(3) sysmain ディレクトリ
μT-Kernel 全体の構築ディレクトリです。
sysmain/build ディレクトリ下に、構築するターゲットシステムのディレクトリを作成し、そのディレクトリ内で make を実行することにより、μT-Kernelのオブジェクトファイルを作成します。
その他の各ディレクトリ（sysinit、tkernel、tstdlib）下の build ディレクトリは、全体を構築する過程で使用される、各モジュール単位の構築ディレクトリです。

(4) tstdlib ディレクトリ
μT-Kernel内で使用している標準的なライブラリ関数（主にビット操作関係）のソースコードです。


2.3. kernel ディレクトリのハードウェア依存部
kernel ディレクトリの中のハードウェア依存部は、sysdependディレクトリです。ハードウェア依存部は、ターゲットのハードウェア、システム構成などに依存し、移植の際に変更する部分です。

sysdepend ディレクトリは、二つのディレクトリより構成されます。

(1)  sysdepend/cpu ディレクトリ
  ターゲットシステムのCPUに依存するソースコードです。
  このディレクトリ下に、ターゲットとするCPUのディレクトリを作成し、該当するソースコードを格納します。

(2) sysdepend/device ディレクトリ
  ターゲットシステムのCPU以外のハードウェアに依存するソースコードです。
  このディレクトリ下に、ターゲットシステムのディレクトリを作成し、該当するソースコードを格納します。

CPU依存部とCPU以外のハードウェア依存部に別けているのは、同一のCPUを用いた異なったハードウェアのシステムへの移植を容易とする為です。CPUが同一である場合、sysdepend/cpu以下を変更する必要はなく、sysdepend/device以下のみの変更で対応が可能です。


2.4. kernel ディレクトリのアプリケーション依存部
kernel ディレクトリの中のアプリケーション依存部は、usermain ディレクトリのみです。
以下に usermain ディレクトリの説明を記します。

(1) usermain ディレクトリ
ユーザプログラムです。通常はここに、アプリケーションの初期タスクで実行されるプログラムおよび、初期タスク生成時のパラメータを設定するためのソースコードが置かれます。
本ソースコードでは、例として T-Monitor相当機能の関数を用いてコンソールに文字を出力するだけのプログラムとなっています。


3. lib ディレクトリ
libディレクトリは、μT-Kernelやユーザプログラムで使用されるライブラリのソースコードを格納しています。

3.1. ディレクトリ構造
libディレクトリは以下のディレクトリ構造となっています。

lib
|-- libsvc                  μT-Kernel システムコールI/Fライブラリ
|   |-- build                   構築用ディレクトリ
|   |   `-- [CPU]
|   `-- src                     ソースディレクトリ
|       `-- sysdepend               ハードウェア依存部
|           |-- include                 共通定義ファイル
|           `-- [CPU]
|
|-- libtk                   μT-Kernel 関数コールライブラリ
|   |-- build                   構築用ディレクトリ
|   |   `-- [TARGET]
|   `-- src                     ソースディレクトリ
|       `-- sysdepend               ハードウェア依存部
|           `-- [TARGET]
|
|-- libtm                   T-Monitor相当機能ライブラリ
|   |-- build                   構築用ディレクトリ
|   |   `-- [TARGET]
|   `-- src                     ソースディレクトリ
|       `-- sysdepend               ハードウェア依存部
|           `-- [TARGET]
|
|-- libstr                  文字列操作ライブラリ
|   |-- build                   構築用ディレクトリ
|   |   `-- [CPU]
|   `-- src                     ソースディレクトリ
|
`-- build                   構築用ディレクトリ（全ライブラリ）
    `-- [TARGET]            ←makeを実行するディレクトリ

上記のディレクトリ構成中の、[TARGET] と記されたディレクトリは対象となるシステムのターゲットボード略称に、 [CPU] と記されたディレクトリは対象となるCPUのCPU略称に置き換えてください。


3.2. 各ディレクトリ説明
libディレクトリ下の各ディレクトリを説明します。

(1) libsvc ディレクトリ
μT-Kernelのシステムコールのインタフェース･ライブラリです。
インタフェース・ライブラリはCPU毎に作成されます。src ディレクトリ下のsysdependディレクトリ下に、ターゲットとするCPUのディレクトリを作成し、ソースコードを格納します。
build ディレクトリは、構築ディレクトリです。構築された libsvc ライブラリは、必要に応じてユーザプログラムにリンクして使用されます。
 
(2) libtk ディレクトリ
μT-Kernelが提供する関数ライブラリです。
src ディレクトリにソースコードが格納されます。src直下のソースコードはカーネル基本部となり、変更は不要です。ハードウェア依存部は、srcディレクトリ下のsysdependディレクトリ下に、ターゲットシステムのディレクトリを作成し、そのソースコードを格納します。
build ディレクトリは、構築ディレクトリです。構築された libtk ライブラリは、必要に応じてユーザプログラムにリンクして使用されます。

(3) libtm ディレクトリ
T-Monitor相当機能の関数ライブラリです。
src ディレクトリにソースコードが格納されます。src直下のソースコードはカーネル基本部となり、変更は不要です。ハードウェア依存部は、srcディレクトリ下のsysdependディレクトリ下に、ターゲットシステムのディレクトリを作成し、そのソースコードを格納します。
build ディレクトリは、構築ディレクトリです。構築された libtm ライブラリは、必要に応じてユーザプログラムにリンクして使用されます。

(4) libstr ディレクトリ
μT-Kernel内およびライブラリ内で使用している標準的なライブラリ関数（主に文字列操作関係）のソースコードです。

(5) build ディレクトリ
全ライブラリの構築用ディレクトリです。
lib/build ディレクトリ下に、構築するターゲットシステムのディレクトリを作成し、そのディレクトリ内で make を実行することにより、全ライブラリのオブジェクトファイルを作成することが出来ます。
その他の各ディレクトリ（libsvc、libtk、libtm、libtm）下の build ディレクトリは、全ライブラリを構築する過程で使用される、各モジュール単位の構築ディレクトリです。


4. include ディレクトリ
includeディレクトリは、μT-Kernelやユーザプログラムで使用される各種定義ファイル（ヘッダファイル）を格納しています。本ディレクトリ下は定義ファイルのみですので、オブジェクトファイルは生成されません。

4.1. ディレクトリ構造
includeディレクトリは以下のディレクトリ構造となっています。

include
|-- tk                      μT-Kernel関連の定義ファイル
|   `-- sysdepend               ハードウェア依存部
|       `-- [TARGET]
|
|-- sys                     システム内部情報の定義ファイル
|   |-- sysdepend               ハードウェア依存部
|   |   `-- [TARGET]
|   `-- svc                     システムコール定義
|
`-- tm                      T-Monitor相当機能の定義ファイル

上記のディレクトリ構成中の、[TARGET] と記されたディレクトリは対象となるシステムのターゲットボード略称に置き換えてください。


4.2. 各ディレクトリの説明
include ディレクトリ下の各ディレクトリを説明します。

(1) include ディレクトリ
include ディレクトリ直下には、共通で使用される型定義ファイルを格納しています。
include直下のファイルは、全てカーネル基本部です。

(2) tk ディレクトリ
μT-Kernel関連の定義ファイルを格納しています。
tk ディレクトリ直下のファイルは、カーネル基本部です。
ハードウェア依存部は、sysdepend ディレクトリ下にターゲットシステムのディレクトリを作成して、格納されています。原則として、sysdependディレクトリ以下の定義ファイルは上位の定義ファイル内より使用（include）されます。ユーザプログラムから直接これらハードウェア依存部の定義ファイルを使用する必要はありません。

(3) sys ディレクトリ
μT-Kernelシステム内部の情報に関する定義ファイルを格納しています。これらのファイルは、サブシステムやライブラリなどシステムプログラムの中で使用されます。通常アプリケーションプログラムが使用することはありません。
sysディレクトリは、二つのディレクトリより構成されます。

  sys/sysdepend ディレクトリ
    システム情報のハードウェア依存部の定義ファイルを格納しています。
    sysdepend ディレクトリ下にターゲットシステムのディレクトリを作成して、
    各々の定義ファイルが格納されています。原則として、sysdependディレクトリ以下の定義ファイルは
    上位の定義ファイル内より使用（include）されます。
    ユーザプログラムより直接これらハードウェア依存部の定義ファイルを使用する必要はありません。

  sys/svc ディレクトリ
    拡張SVC関連の定義ファイルを格納しています。

(4) tm ディレクトリ
T-Monitor相当機能の定義ファイルを格納しています。
このディレクトリ下のファイルはカーネル基本部です。


5. config ディレクトリ
config ディレクトリは、μT-Kernelで使用される各種設定ファイル（config.h, utk_config.h, utk_config_func.h等）を格納しています。
本ディレクトリ下のソースコードは全てハードウェア依存部です。

5.1. ディレクトリ構造
config ディレクトリは以下のディレクトリ構造となっています。

config
|
`--sysdepend              ハードウェア依存部
   `-- [TARGET]

上記のディレクトリ構成中の、[TARGET] と記されたディレクトリは対象となるシステムのターゲットボード略称に置き換えてください。


6. μT-Kernel の構築

6.1. μT-Kernel の構築手順
μT-Kernelを構築し、ロードモジュールを生成する手順を説明します。

(1) 開発環境の準備
ターゲットボードにあわせた開発環境をインストールします。
開発環境が正常に使用できることを確認してください。

<注意> μT-Kernel の構築には GNU make を使用します。


(2) μT-Kernelソースコードの準備
任意の場所にディレクトリを作成し、そこにμT-Kernelソースコードの全ファイルを展開します。
続いて、環境変数 BD にμT-Kernelソースのトップディレクトリを設定します。

<注意> 環境変数 BD はμT-Kernelのベースディレクトリです。μT-Kernelのソースコードを展開した後、必要に応じて変更してください。

ディレクトリ /usr/local/te の下にμT-Kernelソースコードを展開する手順を示します。（% は shell のプロンプトです）。

  % cd /usr/local/te
  % tar xvfz utkernel.x.xx.xx.tar.gz           (x.xx.xx はバージョン番号）
  % export BD=/usr/local/te/utkernel_source    (bashの場合)

(3) カーネルの構築
$BD/kernel/sysmain/build/[TARGET]ディレクトリに移動します。[TARGET] は対象とするシステムのターゲットボード略称になります。
ここで make を実行することにより、$BD/kernel/sysmain/build/[TARGET] ディレクトリにカーネルのロードモジュール（kernel-rom.mot）が生成されます。

以下にARM7実行ボード(AT91)の例を示します（ % は shell のプロンプトです）。

  % cd $BD/kernel/sysmain/build/app_at91
  % make


6.2. μT-Kernel の書き込み
生成したμT-Kernelのロードモジュール(kernel-rom.mot)をターゲットに書き込みます。ターゲットへの書き込み方は開発環境やターゲットボードのマニュアルを参照してください。


7. μT-Kernel が使用する資源

7.1. カーネルオブジェクト
μT-Kernelではシステム内で以下のカーネルオブジェクトを使用します。
なお、ID番号は動的に割り付けられますので、以下ではμT-Kernelが標準的に起動した場合のID番号を記しています。

-----------+-------+----------+--------------------------------------
    種別   |   ID  |  名 称   |            説  明                    
-----------+-------+----------+--------------------------------------
タスク     |   1   |  INIT    | 初期タスク
-----------+-------+----------+--------------------------------------
メッセージ |   -   |  DEvt    | 事象通知(デフォルトでは未使用)
  バッファ |       |          | utk_config_depend.hのCFN_DEVT_MBFSZで変更可
-----------+-------+----------+--------------------------------------
セマフォ   |   -   |  (NULL)  | デバイス管理同期制御
           |       |          | (デバイスをオープンする毎にセマフォを１つ使用する)
-----------+-------+----------+--------------------------------------
イベント   |   1   |  DevMgr  | デバイス管理全体のロック制御
  フラグ   |       |          | 
-----------+-------+----------+--------------------------------------


8. μT-Kernel の起動

8.1. μT-Kernel の初期化処理
システムが起動されると以下の手順でμT-Kernelの初期化処理が実行されます。

(1) リセットハンドラ   C初期化ルーチン （sysdepend/device/[TARGET]/vector.S,starttup_rom.S,icrt0.S）
レジスタ、キャッシュ、変数領域の初期化などのプログラム実行の為の前処理が実行されます。

(2) main   カーネルのメインルーチン  （sysinit/src/sysinit_main.c）
μT-Kernelの起動処理を開始します。本処理では、デバイス初期化処理（knl_init_device）、カーネル用動的メモリ割り当て機能の初期化処理（knl_init_Imalloc）を呼び出した後、カーネルメイン処理（knl_t_kernel_main）を呼び出します。カーネルメイン処理からは復帰しません。

(3) knl_t_kernel_main カーネルメイン処理（kernel/tkernel/tkstart.c)
前述の main から 呼び出されます。μT-Kernelの各機能の初期化処理が行われ、最後に初期タスクを生成・起動します。初期タスクが生成される段階で、μT-Kernelは起動が完了しており、全ての機能は有効となっています。初期タスクの起動をもって、μT-Kernelの起動処理は終了します。

    (3-1) knl_cpu_initialize   CPU 関連初期化処理（sysdepend/cpu/[TARGET]/cpu_init.c）
        カーネル内で使用する例外ハンドラの登録、コプロ関連の設定、等の CPUに依存する初期化処理を実行します。
    
    (3-2) knl_tkdev_initialize   デバイス関連初期化処理（sysdepend/device/[TARGET]/tkdev_init.c）
        各デバイスの割込み禁止など、CPU以外のハードウェアに依存する初期化処理を実行します。
    
    (3-3) 各機能モジュールの初期化
        機能モジュールの初期化ルーチンを以下の順に実行します。
    
          knl_task_initialize           タスク機能の初期化（tkernel/task.c）
          knl_semaphore_initialize      セマフォ機能の初期化（tkernel/semaphore.c）
          knl_eventflag_initialize      イベントフラグ機能の初期化（tkernel/eventflag.c）
          knl_mailbox_initialize        メールボックス機能の初期化（tkernel/mailbox.c）
          knl_messagebuffer_initialize  メッセージバッファ機能の初期化（tkernel/messagebuf.c）
          knl_rendezvous_initialize     ランデブ機能の初期化（tkernel/rendezvous.c）
          knl_mutex_initialize          ミューテックス機能の初期化（tkernel/mutex.c）
          knl_memorypool_initialize     可変長メモリプール機能の初期化（tkernel/mempool.c）
          knl_fix_memorypool_initialize 固定長メモリプール機能の初期化（tkernel/mempfix.c）
          knl_cyclichandler_initialize  周期ハンドラ機能の初期化（tkernel/time_calls.c）
          knl_alarmhandler_initialize   アラームハンドラ機能の初期化（tkernel/time_calls.c）
          knl_subsystem_initialize      サブシステム機能の初期化（tkernel/subsystem.c）
          knl_timer_initialize          システムタイマの初期化（tkernel/timer.c）
    
    (3-4) knl_init_task_startup    初期タスクの生成･起動（kernel/tkernel/tkstart.c）
        初期タスクを生成し起動します。


8.2. 初期タスクによる起動処理
初期タスク knl_init_task（sysinit/sysinit_main.c)は、デバイス管理機能の初期化処理（knl_initialize_devmgr）を実行した後、ユーザが定義した処理に実行を移します。

(1) knl_initialize_devmgr  (kernel/src/device.c)
デバイス管理機能の初期化を実行します。

(2) knl_init_task_main    （sysmain/inittask_main.c）
以下の手順で、ユーザ定義の処理を実行します。

    (2-1) userinit   ユーザ定義の初期化処理
        utk_config_depend.hに設定されたユーザ定義の初期化プログラムを実行します。
    
    (2-2) usermain    ユーザ定義の初期タスクメイン処理（usermain/usermain.c）
        ユーザが定義した初期タスクのメイン処理です。この処理を終了すると初期タスクは終了し、
        μT-Kernelの終了処理が始まります。
        アプリケーションプログラムは、この関数内に記述してください。
        必要に応じて初期タスクのスタックサイズや初期優先度の設定値を変更してください。(usermain/inittask_def.h)
以上
